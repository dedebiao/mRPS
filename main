library(survival)
library(randomForestSRC)
library(glmnet)
library(plsRcox)
library(superpc)
library(gbm)
library(CoxBoost)
library(survivalsvm)
library(dplyr)
library(tibble)
library(BART)
library(survival)
library(survminer)
library(randomForestSRC)
library(timeROC)
library(data.table)
library(tidyr)
library(dplyr)
library(tibble)
library(caret)

##################################
#### 准备工作 ####
##################################
setwd("")
result <- data.frame()
#读取数据
data <- read.delim("")
rownames(data)=data[,1]
data=data[,-1]

#划分训练集和测试集
size <- createDataPartition(data$OS.time,p=0.65,list = F)  # 随机选择65%的数据作为Train data
est_dd <- data[size,]
val_dd_list <- data[-size,]

rf_nodesize <- 15
seed <- 2022
set.seed(seed)
##################################
#### 1-1.RSF ####
##################################

fit <- rfsrc(Surv(OS.time,OS)~.,data = est_dd,
             ntree = 100,nodesize = rf_nodesize,##该值建议多调整  
             splitrule = 'logrank',
             importance = T,
             proximity = T,
             forest = T,
             seed = seed)
#测试集、计算RiskScore
RS=predict(fit,newdata = val_dd_list)$predicted
rs<-cbind(val_dd_list[,1:2],RS)
#计算C-index
rs=as.data.frame(rs)
aa=coxph(Surv(OS.time,OS)~RS,rs)
cindex=as.numeric(summary(aa)$concordance[1])
cc <- data.frame(cindex)%>%rownames_to_column('ID')
#模型结果
cc$Model <- 'RSF'
result <- rbind(result,cc)
result
##################################
#### 2-1.Enet ####
##################################
head(est_dd)
x1 <- as.matrix(est_dd[,3:20])
x2 <- as.matrix(Surv(est_dd$OS.time,est_dd$OS))

for (alpha in seq(0, 1, 0.1)) {
  set.seed(seed)
  fit = cv.glmnet(x1,
                  x2,
                  family = "cox",
                  alpha = alpha,
                  nfolds = 10)
  rs <- cbind(val_dd_list[, 1:2],
              RS = as.numeric(
                predict(
                  fit,
                  type = 'link',
                  newx = as.matrix(val_dd_list[,-c(1, 2)]),
                  s = fit$lambda.min
                )
              ))
Cindex = as.numeric(summary(coxph(Surv(OS.time, OS) ~ RS, rs))$concordance[1])
cc <- data.frame(Cindex)%>%rownames_to_column('ID')
cc$Model <- paste0('Enet', '[α=', alpha, ']')
result <- rbind(result,cc)
}

result
##################################
#### 3-1.StepCox ####
##################################

for (direction in c("both", "backward", "forward")) {
  fit <- step(coxph(Surv(OS.time,OS)~.,est_dd),direction = direction)
  rs <-cbind(val_dd_list[, 1:2],RS = predict(fit, type = 'risk', newdata = val_dd_list))
  
  Cindex = as.numeric(summary(coxph(Surv(OS.time, OS) ~ RS, rs))$concordance[1])
  cc <- data.frame(Cindex)%>%rownames_to_column('ID')

  cc$Model <- paste0('StepCox','[',direction,']')
  result <- rbind(result,cc)
}

result
##################################
#### 3-8.StepCox+gbm ####
##################################

for (direction in c("both", "backward")) {
  fit <- step(coxph(Surv(OS.time,OS)~.,est_dd),direction = direction)
  rid <- names(coef(fit))
  est_dd2 <- est_dd[,c('OS.time','OS',rid)]
  val_dd_list2 <- val_dd_list[,c('OS.time','OS',rid)]
  
  fit = survivalsvm(Surv(OS.time,OS)~., data= est_dd2, gamma.mu = 1)
  rs <- cbind(val_dd_list2[,1:2],RS=as.numeric(predict(fit, val_dd_list2)$predicted))
  
  Cindex = as.numeric(summary(coxph(Surv(OS.time, OS) ~ RS, rs))$concordance[1])
  cc <- data.frame(Cindex)%>%rownames_to_column('ID')
  
  cc$Model <- paste0('StepCox','[',direction,']',' + gbm')
  result <- rbind(result,cc)
}

result
##################################
#### 4-1.CoxBoost ####
##################################

set.seed(seed)
library(snowfall)  # 载入snowfall包
pen <- optimCoxBoostPenalty(est_dd[,'OS.time'],est_dd[,'OS'],as.matrix(est_dd[,-c(1,2)]),
                            trace=TRUE,start.penalty=500,parallel = T)

cv.res <- cv.CoxBoost(est_dd[,'OS.time'],est_dd[,'OS'],as.matrix(est_dd[,-c(1,2)]),
                      maxstepno=500,K=10,type="verweij",penalty=pen$penalty)

fit <- CoxBoost(est_dd[,'OS.time'],est_dd[,'OS'],as.matrix(est_dd[,-c(1,2)]),
                stepno=cv.res$optimal.step,penalty=pen$penalty)
rs <- cbind(val_dd_list[,1:2],RS=as.numeric(predict(fit,newdata=val_dd_list[,-c(1,2)], newtime=val_dd_list[,1], newstatus=val_dd_list[,2], type="lp")))
Cindex = as.numeric(summary(coxph(Surv(OS.time, OS) ~ RS, rs))$concordance[1])
cc <- data.frame(Cindex)%>%rownames_to_column('ID')

cc$Model <- paste0('CoxBoost')
result <- rbind(result,cc)
result
##################################
#### 5.plsRcox####
##################################

set.seed(seed)
#pre_var=est_dd[,3:20]
#dim(pre_var)
#pre_var为基因表达矩阵，这里第3-20列是基因
pdf("plsRcox.pdf")
cv.plsRcox.res=cv.plsRcox(list(x=est_dd[,3:20],time=est_dd$OS.time,status=est_dd$OS),nt=10,verbose = FALSE)
dev.off()
fit <- plsRcox(est_dd[,3:20],time=est_dd$OS.time,event=est_dd$OS,nt=as.numeric(cv.plsRcox.res[5]))
rs <- cbind(val_dd_list[,1:2],RS=as.numeric(predict(fit,type="lp",newdata=val_dd_list[,-c(1,2)])))

cc <- data.frame(Cindex=as.numeric(summary(coxph(Surv(OS.time,OS)~RS,rs))$concordance[1]))%>%
  rownames_to_column('ID')
cc$Model <- paste0('plsRcox')
result <- rbind(result,cc)
result
##################################
#### 6.superpc####
##################################

data <- list(x=t(est_dd[,-c(1,2)]),y=est_dd$OS.time,censoring.status=est_dd$OS,featurenames=colnames(est_dd)[-c(1,2)])
set.seed(seed)
fit <- superpc.train(data = data,type = 'survival',s0.perc = 0.5) #default
cv.fit <- superpc.cv(fit,data,n.threshold = 20,#default 
                     n.fold = 10,
                     n.components=3,
                     min.features=5,
                     max.features=nrow(data$x),
                     compute.fullcv= TRUE,
                     compute.preval=TRUE)

test <-
  list(
    x = t(val_dd_list[, -c(1, 2)]),
    y = val_dd_list$OS.time,
    censoring.status = val_dd_list$OS,
    featurenames = colnames(val_dd_list)[-c(1, 2)]
  )
ff <-
  superpc.predict(fit,
                  data,
                  test,
                  threshold = cv.fit$thresholds[which.max(cv.fit[["scor"]][1, ])],
                  n.components = 1)
rr <- as.numeric(ff$v.pred)
rr2 <- cbind(val_dd_list[, 1:2], RS = rr)
rs <- rr2


cc <- data.frame(Cindex=as.numeric(summary(coxph(Surv(OS.time,OS)~RS,rs))$concordance[1]))%>%
  rownames_to_column('ID')
cc$Model <- paste0('SuperPC')
result <- rbind(result,cc)

result
##################################
#### 7.GBM ####
##################################

set.seed(seed)
fit <- gbm(formula = Surv(OS.time,OS)~.,data = est_dd,distribution = 'coxph',
           n.trees = 10000,
           interaction.depth = 3,
           n.minobsinnode = 10,
           shrinkage = 0.001,
           cv.folds = 10,n.cores = 6)
# find index for number trees with minimum CV error
best <- which.min(fit$cv.error)
set.seed(seed)
fit <- gbm(formula = Surv(OS.time,OS)~.,data = est_dd,distribution = 'coxph',
           n.trees = best,
           interaction.depth = 3,
           n.minobsinnode = 10,
           shrinkage = 0.001,
           cv.folds = 10,n.cores = 8)
rs <- cbind(val_dd_list[,1:2],RS=as.numeric(predict(fit,val_dd_list,n.trees = best,type = 'link')))

cc <- data.frame(Cindex=as.numeric(summary(coxph(Surv(OS.time,OS)~RS,rs))$concordance[1]))%>%
  rownames_to_column('ID')
cc$Model <- paste0('GBM')
result <- rbind(result,cc)

result
##################################
#### 8.survivalsvm ####
##################################

fit = survivalsvm(Surv(OS.time,OS)~., data= est_dd, gamma.mu = 1)

rs <- cbind(val_dd_list[,1:2],RS=as.numeric(predict(fit, val_dd_list)$predicted))

cc <- data.frame(Cindex=as.numeric(summary(coxph(Surv(OS.time,OS)~RS,rs))$concordance[1]))%>%
  rownames_to_column('ID')
cc$Model <- paste0('survival-SVM')
result <- rbind(result,cc)
result
#筛选最高和最低的算法C-index
result2 <- result
result2$Model <- gsub('α','a',result2$Model)
library(ggplot2)
library(ggsci)
library(tidyr)
library(ggbreak)
range(result2$Cindex)
pdf("8ML.pdf")
result2%>%filter(ID!='data')%>%
  ggplot(aes(Cindex,reorder(Model,Cindex)))+
  geom_bar(width = 0.7,stat = 'summary',fun='mean',fill='orange2')+
  theme_classic()+
  labs(y=NULL)
dev.off()

dd <- result2%>%
  filter(ID!='data')%>%
  group_by(Model)%>%
  summarise(Cindex=mean(Cindex))

dd%>%
  ggplot(aes(Cindex,reorder(Model,Cindex)))+
  geom_bar(width=0.7,stat = 'identity',fill='orange')+
  scale_x_break(c(0.05,0.53),scales = 20)


dd2 <- pivot_wider(result2,names_from = 'ID',values_from = 'Cindex')%>%as.data.frame()
dd2[,-1] <- apply(dd2[,-1],2,as.numeric)
dd2[,-1]


测试集生存分析和ROC曲线
rm(list = ls())
library(dplyr)
library(tidyr)
library(tibble)
library(survival)
library(survminer)
library(timeROC)
library(pROC)
library(export)
library(ggsci)

load('sampleclin.rda')

# -------------------------------------------------------------------------
data=rs#example RSF model
#OS,OS.time
mytheme <- theme_survminer(
  font.legend = c(14, "plain", "black"),
  font.x = c(14, "plain", "black"),
  font.y = c(14, "plain", "black"),
  legend = "top"
)
cut <- surv_cutpoint(data, 'OS.time', 'OS', 'RS', minprop = 0.1)
cat <- surv_categorize(cut)
fit <- survfit(Surv(OS.time, OS) ~ RS, cat)
pdf("high,lowsur.pdf")
ggsurvplot(
  fit,
  data = cat,
  palette = pal_nejm()(2),
  conf.int = FALSE,
  size = 1.3,
  pval = T,
  pval.method = T,
  legend.labs = c('High-risk', 'Low-risk'),
  legend.title = "",
  #legend=legend,
  xlab = "Time(days)",
  ylab = 'Overall survival',
  ggtheme = mytheme
)
dev.off()


# -------------------------------------------------------------------------
#RFs,RFS.time
kmp <- function(data,legend,main){
  mytheme <- theme_survminer(font.legend = c(14,"plain", "black"),
                             font.x = c(14,"plain", "black"),
                             font.y = c(14,"plain", "black"),
                             legend = "top")
  cut <- surv_cutpoint(data,'RFS.time','RFS','RS',minprop = 0.1)
  cat <- surv_categorize(cut)
  fit <- survfit(Surv(RFS.time,RFS)~RS,cat)
  pp <- ggsurvplot(fit,data = cat,
                   palette= pal_nejm()(2),
                   conf.int=FALSE,size=1.3,
                   pval=T,pval.method = T,
                   legend.labs=c('High-risk','Low-risk'), 
                   legend.title="",
                   legend=legend,
                   xlab="Time(years)",
                   ylab='Recurrence-free survival',
                   ggtheme = mytheme)
  return(ggpar(pp,main = main))
}

kmp(my,legend = c(0.84,0.97),main = NULL)
graph2pdf(file='All-patients-rfs.pdf',width=4.2,height=4)

#kmp(my[my$IC==1,],legend = c(0.84,0.97),main = 'Patients with ICI (n = 65)')
#graph2pdf(file='Patients with immunotherapy-rfs.pdf',width=4.2,height=4)

#kmp(my[my$IC==0,],legend = c(0.84,0.97),main = 'Patients without ICI (n = 167)')
#graph2pdf(file='Patients without immunotherapy-rfs.pdf',width=4.2,height=4)

# -------------------------------------------------------------------------
#OS.time,OS
my <- val_dd_list
x <- summary(coxph(Surv(OS.time,OS)~.,my[,c(1,2,3:20)]))
y <- data.frame(id=rownames(x$coefficients),
                HR=x$coefficients[,2],
                HR.95L=x$conf.int[,"lower .95"],
                HR.95H=x$conf.int[,'upper .95'],
                pvalue=x$coefficients[,"Pr(>|z|)"])

y <- y[c(1:6,10,7:9),]
y[,-1] <- apply(y[,-1],2,as.numeric)

rt <- y
gene <- rt$id
hr <- sprintf("%.3f",rt$"HR")
hrLow  <- sprintf("%.3f",rt$"HR.95L")
hrHigh <- sprintf("%.3f",rt$"HR.95H")
Hazard.ratio <- paste0(hr," (",hrLow,"-",hrHigh,")")
pVal <- ifelse(rt$pvalue<0.001, "<0.001", sprintf("%.3f", rt$pvalue))

if(T){
  n <- nrow(rt)
  nRow <- n+1
  ylim <- c(1,nRow)
  layout(matrix(c(1,2),nc=2),width=c(3,2))
  
  #绘制森林图左边的基因信息
  xlim = c(0,2.6)
  par(mar=c(4,2.5,2,0))
  plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,xlab="",ylab="")
  text.cex=1
  text(0.5,n:1,gene,adj=0,cex=text.cex)
  text(1.65,n:1,pVal,adj=1,cex=text.cex);
  text(1.5+0.2,n+1,'P-value',cex=text.cex,font=2,adj=1)
  text(2.6,n:1,Hazard.ratio,adj=1,cex=text.cex)
  text(2.45,n+1,'HR (95% CI)',cex=text.cex,font=2,adj=1,)
  
  #绘制森林图
  par(mar=c(4,0,2,1),mgp=c(2,0.5,0))
  xlim = c(0,6)
  plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,ylab="",xaxs="i",xlab="")
  arrows(as.numeric(hrLow),n:1,as.numeric(hrHigh),n:1,angle=0,code=3,length=0.05,col="black",lwd=2.5)
  abline(v=1,col="gray",lty=2,lwd=1.5)
  boxcolor = '#67AB9F'
  points(as.numeric(hr), n:1, pch = 15, cex=2,col = boxcolor)
  axis(1)
}

# -------------------------------------------------------------------------
#RFS.time,RFS
x <- summary(coxph(Surv(RFS.time,RFS)~.,my[,c(3,4,5:13)]))
y <- data.frame(id=rownames(x$coefficients),
                HR=x$coefficients[,2],
                HR.95L=x$conf.int[,"lower .95"],
                HR.95H=x$conf.int[,'upper .95'],
                pvalue=x$coefficients[,"Pr(>|z|)"])
y <- y[c(1:6,10,7:9),]

rt <- y
gene <- rt$id
hr <- sprintf("%.3f",rt$"HR")
hrLow  <- sprintf("%.3f",rt$"HR.95L")
hrHigh <- sprintf("%.3f",rt$"HR.95H")
Hazard.ratio <- paste0(hr," (",hrLow,"-",hrHigh,")")
pVal <- ifelse(rt$pvalue<0.001, "<0.001", sprintf("%.3f", rt$pvalue))

if(T){
  n <- nrow(rt)
  nRow <- n+1
  ylim <- c(1,nRow)
  layout(matrix(c(1,2),nc=2),width=c(3,2))
  
  #绘制森林图左边的基因信息
  xlim = c(0,2.6)
  par(mar=c(4,2.5,2,0))
  plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,xlab="",ylab="")
  text.cex=1
  text(0.5,n:1,gene,adj=0,cex=text.cex)
  text(1.65,n:1,pVal,adj=1,cex=text.cex);
  text(1.5+0.2,n+1,'P-value',cex=text.cex,font=2,adj=1)
  text(2.6,n:1,Hazard.ratio,adj=1,cex=text.cex)
  text(2.45,n+1,'HR (95% CI)',cex=text.cex,font=2,adj=1,)
  
  #绘制森林图
  par(mar=c(4,0,2,1),mgp=c(2,0.5,0))
  xlim = c(0,5)
  plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,ylab="",xaxs="i",xlab="")
  arrows(as.numeric(hrLow),n:1,as.numeric(hrHigh),n:1,angle=0,code=3,length=0.05,col="black",lwd=2.5)
  abline(v=1,col="gray",lty=2,lwd=1.5)
  boxcolor = '#67AB9F'
  points(as.numeric(hr), n:1, pch = 15, cex=2,col = boxcolor)
  axis(1)
}
graph2pdf(file="inhouse-multicox-rfs.pdf", width = 10,height = 4.7)

# -------------------------------------------------------------------------

# -------------------------------------------------------------------------

tt <- timeROC(rs$OS.time,rs$OS,rs$RS,cause = 1,weighting = 'marginal',times = c(1,3,5),ROC = T)
tp <- tt$TP%>%as.data.frame()%>%pivot_longer(cols = 1:3,names_to = 'time',values_to = 'tp')
fp <- tt$FP%>%as.data.frame()%>%pivot_longer(cols = 1:3,names_to = 'time',values_to = 'fp')

dd <- tp
dd$fp <- fp$fp
dd$time <- ifelse(dd$time=='t=1',"1-Year = 0.840",
                  ifelse(dd$time=='t=3','3-Year = 0.776','5-Year = 0.818'))

ggplot(dd,aes(fp,tp,color=time))+
  geom_line(size=1)+
  labs(x='1-Specificity',y='Sensitivity',color=NULL)+
  theme_bw(base_rect_size = 1.5)+
  geom_abline(slope = 1,color='grey70')+
  theme(panel.grid =element_blank(),
        axis.text = element_text(size=11),
        axis.title = element_text(size=13),
        legend.text = element_text(size=12),
        legend.position = c(0.995,0.012),
        legend.justification = c(1,0))+
  scale_color_nejm()+
  scale_x_continuous(expand = c(0.01,0.01))+
  scale_y_continuous(expand = c(0.01,0.01))

# -------------------------------------------------------------------------

fit <- roc(x$RR,x$RS,auc=T)

dd <- data.frame(x=1-fit$specificities,y=fit$sensitivities)
dd <- dd[order(dd$y,dd$x),]
dd$AUC <- 'IRLS'
tmp <- dd
ggplot(tmp,aes(x,y))+
  geom_line(aes(group=AUC))

tmp$AUC2 <- ifelse(tmp$AUC=='IRLS','IRLS= 0.897',ifelse(tmp$AUC=='PD-L1','PD-L1 = 0.686 ***','CD8A= 0.725 **'))

tmp$AUC2 <- factor(tmp$AUC2,levels = unique(tmp$AUC2))
ggplot(tmp,aes(x,y,color=AUC2))+
  geom_line(size=1)+
  labs(x='1-Specificity',y='Sensitivity',color=NULL)+
  theme_bw(base_rect_size = 1.5)+
  geom_abline(slope = 1,color='grey70')+
  theme(panel.grid =element_blank(),
        axis.text = element_text(size=11),
        axis.title = element_text(size=13),
        legend.text = element_text(size=12),
        legend.position = c(0.995,0.012),
        legend.justification = c(1,0))+
  scale_color_nejm()+
  scale_x_continuous(expand = c(0.01,0.01))+
  scale_y_continuous(expand = c(0.01,0.01))
ggsave(filename = 'IC-inhouse-timeROC.pdf',width = 4.3,height = 4)



if(F){
  plot.roc(fit,print.thres = T,print.auc = T)
  pdf(file = 'IC-roc.pdf',width = 4,height = 4)
  plot.roc(fit,
           axes=T, ## 是否显示xy轴
           legacy.axes=T,
           main=NULL, ## Title
           col= "steelblue", ## 曲线颜色
           lty=1, ## 曲线形状
           lwd=3, ## 曲线粗细
           identity=T, ## 是否显示对角线
           identity.col="grey60", ## 对角线颜色
           identity.lty=2, ## 对角线形状
           identity.lwd=2, ## 对角线粗细
           print.thres=F, ## 是否输出cut-off值
           print.thres.pch=20, ## cut-off点的形状
           print.thres.col="red", ## cut-off点和文本的颜色
           print.thres.cex=1.2, 
           print.auc=T, ## 是否显示AUC
           print.auc.pattern="AUC = 0.896", ## 展示AUC的格式
           auc.polygon.border='darkred',
           print.auc.x=0.48, ## AUC值的X位置
           print.auc.y=0.13, ## AUC值的Y位置
           print.auc.cex=1.2, ## AUC值的放大倍数
           print.auc.col='black', ## ACU值的颜色
           auc.polygon=TRUE, ## 是否将ROC下面积上色
           auc.polygon.col='skyblue', 
           max.auc.polygon=TRUE,
           max.auc.polygon.col='WhiteSmoke',
           max.auc.polygon.lty=1
  )
  dev.off()
}
# -------------------------------------------------------------------------

# -------------------------------------------------------------------------

library(plyr)
ggdata <- table(x$gg,x$RR)%>%as.data.frame()
ggdata2 <- ddply(ggdata,'Var1',transform,percent_Freq=Freq/sum(Freq)*100)
ggdata2 <- ddply(ggdata2,'Var1',transform,lable=cumsum(percent_Freq)-0.5*percent_Freq)
ggdata2$ll <- paste0(round(ggdata2$percent_Freq/100,2)*100,'%')
ggdata2$Var2 <- factor(ifelse(ggdata2$Var2==0,'NR','R'),levels = c('R','NR'))

ggplot(ggdata2,aes(Var1,percent_Freq,fill=Var2))+
  geom_bar(stat = 'identity',width = 0.85)+
  xlab(NULL)+ylab('Fraction (%)')+
  geom_text(aes(label=ll),size=3.8,
            position = position_stack(vjust = 0.5),
            color='white')+
  scale_fill_manual(values = pal_npg(alpha = 0.9)(2)[1:2])+
  theme_classic()+
  scale_x_discrete(expand = c(0.3,0.2))+
  scale_y_continuous(expand = c(0.01,0.0))+
  ggtitle('****')+
  theme(legend.position = 'right',
        plot.title = element_text(hjust=0.5,face = 'plain'),
        axis.title = element_text(size=13),
        axis.text.y = element_text(size=10),
        axis.text.x = element_text(size=12))+
  labs(fill=NULL)
ggsave(filename = 'IC-bar.pdf',height = 4,width = 3.2)

chisq.test(table(x$gg,x$RR))

# -------------------------------------------------------------------------

ggplot(x2,aes(reorder(ID,RS),RS,fill=Res))+
  geom_bar(stat = 'identity',width = 0.7,color='grey30',position = position_dodge2(width = 0.9))+
  scale_fill_nejm()+labs(y='IRLS score')+
  theme_classic(base_rect_size = 2)+
  theme(axis.line.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        legend.title = element_blank(),
        axis.text.y = element_text(size=12),
        axis.title.y = element_text(size=13),
        legend.text = element_text(size=12),
        legend.position = c(0.01,1),
        legend.justification = c(0,1))

# -------------------------------------------------------------------------

library(compareC)
tt <- my
dd <- data.frame()
for (i in colnames(my)[5:13]) {
  fit <- summary(coxph(Surv(OS.time,OS)~get(i),tt))
  CC <- fit$concordance[1]%>%as.numeric()
  se <- fit$concordance[2]%>%as.numeric()
  p <- compareC(tt$OS.time,tt$OS,tt$RS,tt[,i])$pval
  dd <- rbind(dd,data.frame(ID=i,C=CC,SE=se,P=p))
}

ggplot(dd,aes(ID,C,fill=ID))+
  geom_bar(stat='identity',position=position_dodge(0.8),width=0.6)+
  geom_errorbar(aes(ymax=C+1.5*SE,ymin=C-1.5*SE),
                width=0.1,position = position_dodge(0.8),size=0.6)+
  theme_bw(base_rect_size = 1.5)+
  ggtitle('C-index (Compared with IRLS)')+
  theme(axis.title = element_blank(),
        axis.text = element_text(size=12),
        legend.position = 'none',
        panel.grid = element_blank(),
        plot.title = element_text(hjust = 0.5,size=14),
        strip.text = element_text(size=12),
        axis.ticks.x = element_blank())+
  scale_fill_npg()+
  scale_y_continuous(expand = c(0,0.01),limits = c(0,0.85))+
  geom_text(aes(y=0.80,label=ll),size=5)
