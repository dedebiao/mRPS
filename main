library(survival)
library(randomForestSRC)
library(glmnet)
library(plsRcox)
library(superpc)
library(gbm)
library(CoxBoost)
library(survivalsvm)
library(dplyr)
library(tibble)
library(BART)
library(survival)
library(survminer)
library(randomForestSRC)
library(timeROC)
library(data.table)
library(tidyr)
library(dplyr)
library(tibble)
library(caret)

##################################
#### Preparatory work  ####
##################################
result <- data.frame()
#Read the data
data <- read.table("",header=T,row.names = 1)

#Divide the training and test sets
size <- createDataPartition(data$OS.time,p=0.65,list = F)  # Randomly select 65% of the data as Train data
est_dd <- data[size,]
val_dd_list <- data[-size,]

rf_nodesize <- 15
seed <- 2023
set.seed(seed)
##################################
#### 1-1.RSF ####
##################################

fit <- rfsrc(Surv(OS.time,OS)~.,data = est_dd,
             ntree = 100,nodesize = rf_nodesize,##This value suggests multiple adjustments  
             splitrule = 'logrank',
             importance = T,
             proximity = T,
             forest = T,
             seed = seed)
#Test set, calculate RiskScore
RS=predict(fit,newdata = val_dd_list)$predicted
rs<-cbind(val_dd_list[,1:2],RS)
#Calculate the C-index
rs=as.data.frame(rs)
aa=coxph(Surv(OS.time,OS)~RS,rs)
cindex=as.numeric(summary(aa)$concordance[1])
cc <- data.frame(cindex)%>%rownames_to_column('ID')
#Model results
cc$Model <- 'RSF'
result <- rbind(result,cc)
result
##################################
#### 2-1.Enet ####
##################################
head(est_dd)
x1 <- as.matrix(est_dd[,3:20])
x2 <- as.matrix(Surv(est_dd$OS.time,est_dd$OS))

for (alpha in seq(0, 1, 0.1)) {
  set.seed(seed)
  fit = cv.glmnet(x1,
                  x2,
                  family = "cox",
                  alpha = alpha,
                  nfolds = 10)
  rs <- cbind(val_dd_list[, 1:2],
              RS = as.numeric(
                predict(
                  fit,
                  type = 'link',
                  newx = as.matrix(val_dd_list[,-c(1, 2)]),
                  s = fit$lambda.min
                )
              ))
Cindex = as.numeric(summary(coxph(Surv(OS.time, OS) ~ RS, rs))$concordance[1])
cc <- data.frame(Cindex)%>%rownames_to_column('ID')
cc$Model <- paste0('Enet', '[α=', alpha, ']')
result <- rbind(result,cc)
}

result
##################################
#### 3-1.StepCox ####
##################################

for (direction in c("both", "backward", "forward")) {
  fit <- step(coxph(Surv(OS.time,OS)~.,est_dd),direction = direction)
  rs <-cbind(val_dd_list[, 1:2],RS = predict(fit, type = 'risk', newdata = val_dd_list))
  
  Cindex = as.numeric(summary(coxph(Surv(OS.time, OS) ~ RS, rs))$concordance[1])
  cc <- data.frame(Cindex)%>%rownames_to_column('ID')

  cc$Model <- paste0('StepCox','[',direction,']')
  result <- rbind(result,cc)
}

result
##################################
#### 3-8.StepCox+gbm ####
##################################

for (direction in c("both", "backward")) {
  fit <- step(coxph(Surv(OS.time,OS)~.,est_dd),direction = direction)
  rid <- names(coef(fit))
  est_dd2 <- est_dd[,c('OS.time','OS',rid)]
  val_dd_list2 <- val_dd_list[,c('OS.time','OS',rid)]
  
  fit = survivalsvm(Surv(OS.time,OS)~., data= est_dd2, gamma.mu = 1)
  rs <- cbind(val_dd_list2[,1:2],RS=as.numeric(predict(fit, val_dd_list2)$predicted))
  
  Cindex = as.numeric(summary(coxph(Surv(OS.time, OS) ~ RS, rs))$concordance[1])
  cc <- data.frame(Cindex)%>%rownames_to_column('ID')
  
  cc$Model <- paste0('StepCox','[',direction,']',' + gbm')
  result <- rbind(result,cc)
}

result
##################################
#### 4-1.CoxBoost ####
##################################

set.seed(seed)
library(snowfall)  # Load the snowfall package
pen <- optimCoxBoostPenalty(est_dd[,'OS.time'],est_dd[,'OS'],as.matrix(est_dd[,-c(1,2)]),
                            trace=TRUE,start.penalty=500,parallel = T)

cv.res <- cv.CoxBoost(est_dd[,'OS.time'],est_dd[,'OS'],as.matrix(est_dd[,-c(1,2)]),
                      maxstepno=500,K=10,type="verweij",penalty=pen$penalty)

fit <- CoxBoost(est_dd[,'OS.time'],est_dd[,'OS'],as.matrix(est_dd[,-c(1,2)]),
                stepno=cv.res$optimal.step,penalty=pen$penalty)
rs <- cbind(val_dd_list[,1:2],RS=as.numeric(predict(fit,newdata=val_dd_list[,-c(1,2)], newtime=val_dd_list[,1], newstatus=val_dd_list[,2], type="lp")))
Cindex = as.numeric(summary(coxph(Surv(OS.time, OS) ~ RS, rs))$concordance[1])
cc <- data.frame(Cindex)%>%rownames_to_column('ID')

cc$Model <- paste0('CoxBoost')
result <- rbind(result,cc)
result
##################################
#### 5.plsRcox####
##################################

set.seed(seed)
#pre_var=est_dd[,3:20]
#dim(pre_var)
#pre_var is the gene expression matrix, where columns 3-20 are genes
pdf("plsRcox.pdf")
cv.plsRcox.res=cv.plsRcox(list(x=est_dd[,3:20],time=est_dd$OS.time,status=est_dd$OS),nt=10,verbose = FALSE)
dev.off()
fit <- plsRcox(est_dd[,3:20],time=est_dd$OS.time,event=est_dd$OS,nt=as.numeric(cv.plsRcox.res[5]))
rs <- cbind(val_dd_list[,1:2],RS=as.numeric(predict(fit,type="lp",newdata=val_dd_list[,-c(1,2)])))

cc <- data.frame(Cindex=as.numeric(summary(coxph(Surv(OS.time,OS)~RS,rs))$concordance[1]))%>%
  rownames_to_column('ID')
cc$Model <- paste0('plsRcox')
result <- rbind(result,cc)
result
##################################
#### 6.superpc####
##################################

data <- list(x=t(est_dd[,-c(1,2)]),y=est_dd$OS.time,censoring.status=est_dd$OS,featurenames=colnames(est_dd)[-c(1,2)])
set.seed(seed)
fit <- superpc.train(data = data,type = 'survival',s0.perc = 0.5) #default
cv.fit <- superpc.cv(fit,data,n.threshold = 20,#default 
                     n.fold = 10,
                     n.components=3,
                     min.features=5,
                     max.features=nrow(data$x),
                     compute.fullcv= TRUE,
                     compute.preval=TRUE)

test <-
  list(
    x = t(val_dd_list[, -c(1, 2)]),
    y = val_dd_list$OS.time,
    censoring.status = val_dd_list$OS,
    featurenames = colnames(val_dd_list)[-c(1, 2)]
  )
ff <-
  superpc.predict(fit,
                  data,
                  test,
                  threshold = cv.fit$thresholds[which.max(cv.fit[["scor"]][1, ])],
                  n.components = 1)
rr <- as.numeric(ff$v.pred)
rr2 <- cbind(val_dd_list[, 1:2], RS = rr)
rs <- rr2


cc <- data.frame(Cindex=as.numeric(summary(coxph(Surv(OS.time,OS)~RS,rs))$concordance[1]))%>%
  rownames_to_column('ID')
cc$Model <- paste0('SuperPC')
result <- rbind(result,cc)

result
##################################
#### 7.GBM ####
##################################

set.seed(seed)
fit <- gbm(formula = Surv(OS.time,OS)~.,data = est_dd,distribution = 'coxph',
           n.trees = 10000,
           interaction.depth = 3,
           n.minobsinnode = 10,
           shrinkage = 0.001,
           cv.folds = 10,n.cores = 6)
# find index for number trees with minimum CV error
best <- which.min(fit$cv.error)
set.seed(seed)
fit <- gbm(formula = Surv(OS.time,OS)~.,data = est_dd,distribution = 'coxph',
           n.trees = best,
           interaction.depth = 3,
           n.minobsinnode = 10,
           shrinkage = 0.001,
           cv.folds = 10,n.cores = 8)
rs <- cbind(val_dd_list[,1:2],RS=as.numeric(predict(fit,val_dd_list,n.trees = best,type = 'link')))

cc <- data.frame(Cindex=as.numeric(summary(coxph(Surv(OS.time,OS)~RS,rs))$concordance[1]))%>%
  rownames_to_column('ID')
cc$Model <- paste0('GBM')
result <- rbind(result,cc)

result
##################################
#### 8.survivalsvm ####
##################################

fit = survivalsvm(Surv(OS.time,OS)~., data= est_dd, gamma.mu = 1)

rs <- cbind(val_dd_list[,1:2],RS=as.numeric(predict(fit, val_dd_list)$predicted))

cc <- data.frame(Cindex=as.numeric(summary(coxph(Surv(OS.time,OS)~RS,rs))$concordance[1]))%>%
  rownames_to_column('ID')
cc$Model <- paste0('survival-SVM')
result <- rbind(result,cc)
result
#Filter the highest and lowest algorithm C-index
result2 <- result
result2$Model <- gsub('α','a',result2$Model)
library(ggplot2)
library(ggsci)
library(tidyr)
library(ggbreak)
range(result2$Cindex)
pdf("ML.pdf")
result2%>%filter(ID!='data')%>%
  ggplot(aes(Cindex,reorder(Model,Cindex)))+
  geom_bar(width = 0.7,stat = 'summary',fun='mean',fill='orange2')+
  theme_classic()+
  labs(y=NULL)
dev.off()

dd <- result2%>%
  filter(ID!='data')%>%
  group_by(Model)%>%
  summarise(Cindex=mean(Cindex))

dd%>%
  ggplot(aes(Cindex,reorder(Model,Cindex)))+
  geom_bar(width=0.7,stat = 'identity',fill='orange')+
  scale_x_break(c(0.05,0.53),scales = 20)


dd2 <- pivot_wider(result2,names_from = 'ID',values_from = 'Cindex')%>%as.data.frame()
dd2[,-1] <- apply(dd2[,-1],2,as.numeric)
dd2[,-1]


Test set survival analysis and ROC curves
library(dplyr)
library(tidyr)
library(tibble)
library(survival)
library(survminer)
library(timeROC)
library(pROC)
library(export)
library(ggsci)

# -------------------------------------------------------------------------
data=rs#example RSF model
#OS,OS.time
mytheme <- theme_survminer(
  font.legend = c(14, "plain", "black"),
  font.x = c(14, "plain", "black"),
  font.y = c(14, "plain", "black"),
  legend = "top"
)
cut <- surv_cutpoint(data, 'OS.time', 'OS', 'RS', minprop = 0.1)
cat <- surv_categorize(cut)
fit <- survfit(Surv(OS.time, OS) ~ RS, cat)
pdf("high_lowsur.pdf")
ggsurvplot(
  fit,
  data = cat,
  palette = pal_nejm()(2),
  conf.int = FALSE,
  size = 1.3,
  pval = T,
  pval.method = T,
  legend.labs = c('High-risk', 'Low-risk'),
  legend.title = "",
  #legend=legend,
  xlab = "Time(days)",
  ylab = 'Overall survival',
  ggtheme = mytheme
)
dev.off()


# -------------------------------------------------------------------------
#RFs,RFS.time
kmp <- function(data,legend,main){
  mytheme <- theme_survminer(font.legend = c(14,"plain", "black"),
                             font.x = c(14,"plain", "black"),
                             font.y = c(14,"plain", "black"),
                             legend = "top")
  cut <- surv_cutpoint(data,'RFS.time','RFS','RS',minprop = 0.1)
  cat <- surv_categorize(cut)
  fit <- survfit(Surv(RFS.time,RFS)~RS,cat)
  pp <- ggsurvplot(fit,data = cat,
                   palette= pal_nejm()(2),
                   conf.int=FALSE,size=1.3,
                   pval=T,pval.method = T,
                   legend.labs=c('High-risk','Low-risk'), 
                   legend.title="",
                   legend=legend,
                   xlab="Time(years)",
                   ylab='Recurrence-free survival',
                   ggtheme = mytheme)
  return(ggpar(pp,main = main))
}

kmp(my,legend = c(0.84,0.97),main = NULL)
graph2pdf(file='All-patients-rfs.pdf',width=4.2,height=4)

#kmp(my[my$IC==1,],legend = c(0.84,0.97),main = 'Patients with ICI (n = 65)')
#graph2pdf(file='Patients with immunotherapy-rfs.pdf',width=4.2,height=4)

#kmp(my[my$IC==0,],legend = c(0.84,0.97),main = 'Patients without ICI (n = 167)')
#graph2pdf(file='Patients without immunotherapy-rfs.pdf',width=4.2,height=4)

# -------------------------------------------------------------------------
#OS.time,OS
my <- val_dd_list
x <- summary(coxph(Surv(OS.time,OS)~.,my[,c(1,2,3:20)]))
y <- data.frame(id=rownames(x$coefficients),
                HR=x$coefficients[,2],
                HR.95L=x$conf.int[,"lower .95"],
                HR.95H=x$conf.int[,'upper .95'],
                pvalue=x$coefficients[,"Pr(>|z|)"])

y <- y[c(1:6,10,7:9),]
y[,-1] <- apply(y[,-1],2,as.numeric)

rt <- y
gene <- rt$id
hr <- sprintf("%.3f",rt$"HR")
hrLow  <- sprintf("%.3f",rt$"HR.95L")
hrHigh <- sprintf("%.3f",rt$"HR.95H")
Hazard.ratio <- paste0(hr," (",hrLow,"-",hrHigh,")")
pVal <- ifelse(rt$pvalue<0.001, "<0.001", sprintf("%.3f", rt$pvalue))

if(T){
  n <- nrow(rt)
  nRow <- n+1
  ylim <- c(1,nRow)
  layout(matrix(c(1,2),nc=2),width=c(3,2))
  
  #Plot the genetic information on the left side of the forest plot
  xlim = c(0,2.6)
  par(mar=c(4,2.5,2,0))
  plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,xlab="",ylab="")
  text.cex=1
  text(0.5,n:1,gene,adj=0,cex=text.cex)
  text(1.65,n:1,pVal,adj=1,cex=text.cex);
  text(1.5+0.2,n+1,'P-value',cex=text.cex,font=2,adj=1)
  text(2.6,n:1,Hazard.ratio,adj=1,cex=text.cex)
  text(2.45,n+1,'HR (95% CI)',cex=text.cex,font=2,adj=1,)
  
  #Map the forest
  par(mar=c(4,0,2,1),mgp=c(2,0.5,0))
  xlim = c(0,6)
  plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,ylab="",xaxs="i",xlab="")
  arrows(as.numeric(hrLow),n:1,as.numeric(hrHigh),n:1,angle=0,code=3,length=0.05,col="black",lwd=2.5)
  abline(v=1,col="gray",lty=2,lwd=1.5)
  boxcolor = '#67AB9F'
  points(as.numeric(hr), n:1, pch = 15, cex=2,col = boxcolor)
  axis(1)
}

# -------------------------------------------------------------------------
#RFS.time,RFS
x <- summary(coxph(Surv(RFS.time,RFS)~.,my[,c(3,4,5:13)]))
y <- data.frame(id=rownames(x$coefficients),
                HR=x$coefficients[,2],
                HR.95L=x$conf.int[,"lower .95"],
                HR.95H=x$conf.int[,'upper .95'],
                pvalue=x$coefficients[,"Pr(>|z|)"])
y <- y[c(1:6,10,7:9),]

rt <- y
gene <- rt$id
hr <- sprintf("%.3f",rt$"HR")
hrLow  <- sprintf("%.3f",rt$"HR.95L")
hrHigh <- sprintf("%.3f",rt$"HR.95H")
Hazard.ratio <- paste0(hr," (",hrLow,"-",hrHigh,")")
pVal <- ifelse(rt$pvalue<0.001, "<0.001", sprintf("%.3f", rt$pvalue))

if(T){
  n <- nrow(rt)
  nRow <- n+1
  ylim <- c(1,nRow)
  layout(matrix(c(1,2),nc=2),width=c(3,2))
  
  #Plot the genetic information on the left side of the forest plot
  xlim = c(0,2.6)
  par(mar=c(4,2.5,2,0))
  plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,xlab="",ylab="")
  text.cex=1
  text(0.5,n:1,gene,adj=0,cex=text.cex)
  text(1.65,n:1,pVal,adj=1,cex=text.cex);
  text(1.5+0.2,n+1,'P-value',cex=text.cex,font=2,adj=1)
  text(2.6,n:1,Hazard.ratio,adj=1,cex=text.cex)
  text(2.45,n+1,'HR (95% CI)',cex=text.cex,font=2,adj=1,)
  
  #Map the forest
  par(mar=c(4,0,2,1),mgp=c(2,0.5,0))
  xlim = c(0,5)
  plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,ylab="",xaxs="i",xlab="")
  arrows(as.numeric(hrLow),n:1,as.numeric(hrHigh),n:1,angle=0,code=3,length=0.05,col="black",lwd=2.5)
  abline(v=1,col="gray",lty=2,lwd=1.5)
  boxcolor = '#67AB9F'
  points(as.numeric(hr), n:1, pch = 15, cex=2,col = boxcolor)
  axis(1)
}

# -------------------------------------------------------------------------

# -------------------------------------------------------------------------

tt <- timeROC(rs$OS.time,rs$OS,rs$RS,cause = 1,weighting = 'marginal',times = c(1,3,5),ROC = T)
tp <- tt$TP%>%as.data.frame()%>%pivot_longer(cols = 1:3,names_to = 'time',values_to = 'tp')
fp <- tt$FP%>%as.data.frame()%>%pivot_longer(cols = 1:3,names_to = 'time',values_to = 'fp')

dd <- tp
dd$fp <- fp$fp
dd$time <- ifelse(dd$time=='t=1',"Year-1 = 0.7771",
                  ifelse(dd$time=='t=3','Year-3 = 0.6164','Year-5 = 0.6426'))

ggplot(dd,aes(fp,tp,color=time))+
  geom_line(size=1)+
  labs(x='1-Specificity',y='Sensitivity',color=NULL)+
  theme_bw(base_rect_size = 1.5)+
  geom_abline(slope = 1,color='grey70')+
  theme(panel.grid =element_blank(),
        axis.text = element_text(size=11),
        axis.title = element_text(size=13),
        legend.text = element_text(size=12),
        legend.justification = c(1,0))+
  scale_color_nejm()+
  scale_x_continuous(expand = c(0.01,0.01))+
  scale_y_continuous(expand = c(0.01,0.01))
